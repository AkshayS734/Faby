import UIKit
import Supabase

class ModernSignupViewController: UIViewController {
    
    // MARK: - UI Components
    private let contentView = UIView()
    private let stepsIndicatorView = UIView()
    
    // Field labels
    private let nameLabel = UILabel()
    private let emailLabel = UILabel()
    private let relationshipLabel = UILabel()
    private let passwordLabel = UILabel()
    private let confirmPasswordLabel = UILabel()
    
    // Input fields
    private let nameTextField = UITextField()
    private let emailTextField = UITextField()
    private let relationshipSegmentedControl = UISegmentedControl(items: ["Parent", "Guardian", "Other"])
    private let passwordTextField = UITextField()
    private let confirmPasswordTextField = UITextField()
    
    // Buttons and additional labels
    private let nextButton = UIButton(type: .system)
    private let signInButton = UIButton(type: .system)
    private let termsLabel = UILabel()
    
    // MARK: - Properties
    private let supabase = SupabaseClient(
        supabaseURL: URL(string: "https://hlkmrimpxzsnxzrgofes.supabase.co")!,
        supabaseKey: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhsa21yaW1weHpzbnh6cmdvZmVzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAwNzI1MjgsImV4cCI6MjA1NTY0ODUyOH0.6mvladJjLsy4Q7DTs7x6jnQrLaKrlsnwDUlN-x_ZcFY"
    )
    
    // Store user information to pass to baby details screen
    var userInfo: [String: Any] = [:]
    
    // MARK: - Lifecycle Methods
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupKeyboardHandling()
    }
    
    // MARK: - Setup Methods
    private func setupUI() {
        // Base setup
        view.backgroundColor = .systemBackground
        
        // Content view setup
        contentView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(contentView)
        
        // Create name label
        let nameLabel = UILabel()
        nameLabel.text = "Full Name"
        nameLabel.font = UIFont.systemFont(ofSize: 17, weight: .medium)
        nameLabel.textColor = .label
        nameLabel.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(nameLabel)
        
        // Create email label
        let emailLabel = UILabel()
        emailLabel.text = "Email"
        emailLabel.font = UIFont.systemFont(ofSize: 17, weight: .medium)
        emailLabel.textColor = .label
        emailLabel.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(emailLabel)
        
        // Create password label
        let passwordLabel = UILabel()
        passwordLabel.text = "Password"
        passwordLabel.font = UIFont.systemFont(ofSize: 17, weight: .medium)
        passwordLabel.textColor = .label
        passwordLabel.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(passwordLabel)
        
        // Create confirm password label
        let confirmPasswordLabel = UILabel()
        confirmPasswordLabel.text = "Confirm Password"
        confirmPasswordLabel.font = UIFont.systemFont(ofSize: 17, weight: .medium)
        confirmPasswordLabel.textColor = .label
        confirmPasswordLabel.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(confirmPasswordLabel)
        
        // Steps indicator (two dots)
        stepsIndicatorView.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(stepsIndicatorView)
        
        // Create two dots to indicate steps
        let dot1 = createStepDot(active: true)  // Current step
        let dot2 = createStepDot(active: false) // Next step
        
        // Add dots to the indicator view
        stepsIndicatorView.addSubview(dot1)
        stepsIndicatorView.addSubview(dot2)
        
        // Position the dots
        NSLayoutConstraint.activate([
            dot1.centerYAnchor.constraint(equalTo: stepsIndicatorView.centerYAnchor),
            dot1.leadingAnchor.constraint(equalTo: stepsIndicatorView.leadingAnchor),
            dot1.widthAnchor.constraint(equalToConstant: 8),
            dot1.heightAnchor.constraint(equalToConstant: 8),
            
            dot2.centerYAnchor.constraint(equalTo: stepsIndicatorView.centerYAnchor),
            dot2.leadingAnchor.constraint(equalTo: dot1.trailingAnchor, constant: 8),
            dot2.widthAnchor.constraint(equalToConstant: 8),
            dot2.heightAnchor.constraint(equalToConstant: 8)
        ])
        
        // Text Fields setup
        setupTextField(
            nameTextField,
            placeholder: "Enter your full name",
            keyboardType: .default
        )
        contentView.addSubview(nameTextField)
        
        setupTextField(
            emailTextField,
            placeholder: "Enter your email address",
            keyboardType: .emailAddress
        )
        contentView.addSubview(emailTextField)
        
        // Relationship segmented control setup
        relationshipLabel.text = "Relationship with Baby"
        relationshipLabel.font = UIFont.systemFont(ofSize: 16, weight: .medium)
        relationshipLabel.textColor = .label
        relationshipLabel.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(relationshipLabel)
        
        relationshipSegmentedControl.selectedSegmentIndex = 0 // Parent selected by default
        relationshipSegmentedControl.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(relationshipSegmentedControl)
        
        setupTextField(
            passwordTextField,
            placeholder: "Create password",
            keyboardType: .default,
            isSecure: true
        )
        contentView.addSubview(passwordTextField)
        
        setupTextField(
            confirmPasswordTextField,
            placeholder: "Confirm your password",
            keyboardType: .default,
            isSecure: true
        )
        contentView.addSubview(confirmPasswordTextField)
        
        // Next Button
        nextButton.setTitle("Next", for: .normal)
        nextButton.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .semibold)
        nextButton.backgroundColor = UIColor(red: 0.0, green: 0.48, blue: 1.0, alpha: 1.0) // Apple blue
        nextButton.setTitleColor(.white, for: .normal)
        nextButton.layer.cornerRadius = 12
        nextButton.addTarget(self, action: #selector(nextButtonTapped), for: .touchUpInside)
        nextButton.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(nextButton)
        
        // Already have an account label and sign in button
        let attributedString = NSMutableAttributedString(string: "Already have an account? ")
        attributedString.append(NSAttributedString(string: "Sign in", attributes: [
            .foregroundColor: UIColor.systemBlue,
            .font: UIFont.systemFont(ofSize: 14, weight: .medium)
        ]))
        
        signInButton.setAttributedTitle(attributedString, for: .normal)
        signInButton.addTarget(self, action: #selector(signInButtonTapped), for: .touchUpInside)
        signInButton.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(signInButton)
        
        // Terms and conditions
        termsLabel.text = "By signing up, you agree to our Terms of Service and Privacy Policy"
        termsLabel.font = UIFont.systemFont(ofSize: 12)
        termsLabel.textColor = .secondaryLabel
        termsLabel.textAlignment = .center
        termsLabel.numberOfLines = 0
        termsLabel.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(termsLabel)
        
        setupConstraints()
    }
    
    private func setupTextField(_ textField: UITextField, placeholder: String, keyboardType: UIKeyboardType, isSecure: Bool = false) {
        textField.placeholder = placeholder
        textField.keyboardType = keyboardType
        textField.isSecureTextEntry = isSecure
        textField.borderStyle = .none
        textField.backgroundColor = UIColor.systemGray6
        textField.layer.cornerRadius = 8
        
        // Add padding to the text field
        let paddingView = UIView(frame: CGRect(x: 0, y: 0, width: 15, height: 50))
        textField.leftView = paddingView
        textField.leftViewMode = .always
        
        // Add eye icon for password fields
        if isSecure {
            let rightView = UIButton(type: .custom)
            rightView.setImage(UIImage(systemName: "eye"), for: .normal)
            rightView.tintColor = .systemGray
            rightView.frame = CGRect(x: 0, y: 0, width: 40, height: 50)
            rightView.contentMode = .center
            textField.rightView = rightView
            textField.rightViewMode = .always
        }
        
        textField.heightAnchor.constraint(equalToConstant: 50).isActive = true
        textField.translatesAutoresizingMaskIntoConstraints = false
        textField.delegate = self
    }
    
    private func createStepDot(active: Bool) -> UIView {
        let dotView = UIView()
        dotView.translatesAutoresizingMaskIntoConstraints = false
        dotView.layer.cornerRadius = 4 // Smaller dots (8x8)
        
        if active {
            dotView.backgroundColor = UIColor(red: 0.0, green: 0.48, blue: 1.0, alpha: 1.0) // Apple blue
        } else {
            dotView.backgroundColor = UIColor.lightGray // Light gray for inactive
        }
        
        return dotView
    }
    
    private func setupConstraints() {
        NSLayoutConstraint.activate([
            // Content View
            contentView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            contentView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            contentView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            contentView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
            
            // Name label
            nameLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 20),
            nameLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            nameLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            
            // Name TextField
            nameTextField.topAnchor.constraint(equalTo: nameLabel.bottomAnchor, constant: 8),
            nameTextField.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            nameTextField.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            
            // Email label
            emailLabel.topAnchor.constraint(equalTo: nameTextField.bottomAnchor, constant: 20),
            emailLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            emailLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            
            // Email TextField
            emailTextField.topAnchor.constraint(equalTo: emailLabel.bottomAnchor, constant: 8),
            emailTextField.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            emailTextField.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            
            // Relationship Label
            relationshipLabel.topAnchor.constraint(equalTo: emailTextField.bottomAnchor, constant: 20),
            relationshipLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            relationshipLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            
            // Relationship Segmented Control
            relationshipSegmentedControl.topAnchor.constraint(equalTo: relationshipLabel.bottomAnchor, constant: 8),
            relationshipSegmentedControl.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            relationshipSegmentedControl.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            relationshipSegmentedControl.heightAnchor.constraint(equalToConstant: 44),
            
            // Password label
            passwordLabel.topAnchor.constraint(equalTo: relationshipSegmentedControl.bottomAnchor, constant: 20),
            passwordLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            passwordLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            
            // Password TextField
            passwordTextField.topAnchor.constraint(equalTo: passwordLabel.bottomAnchor, constant: 8),
            passwordTextField.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            passwordTextField.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            
            // Confirm Password label
            confirmPasswordLabel.topAnchor.constraint(equalTo: passwordTextField.bottomAnchor, constant: 20),
            confirmPasswordLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            confirmPasswordLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            
            // Confirm Password TextField
            confirmPasswordTextField.topAnchor.constraint(equalTo: confirmPasswordLabel.bottomAnchor, constant: 8),
            confirmPasswordTextField.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            confirmPasswordTextField.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            
            // Next Button
            nextButton.topAnchor.constraint(equalTo: confirmPasswordTextField.bottomAnchor, constant: 32),
            nextButton.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            nextButton.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            nextButton.heightAnchor.constraint(equalToConstant: 50),
            
            // Sign In Button
            signInButton.topAnchor.constraint(equalTo: nextButton.bottomAnchor, constant: 16),
            signInButton.centerXAnchor.constraint(equalTo: contentView.centerXAnchor),
            
            // Terms Label
            termsLabel.topAnchor.constraint(equalTo: signInButton.bottomAnchor, constant: 24),
            termsLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            termsLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            termsLabel.bottomAnchor.constraint(lessThanOrEqualTo: contentView.bottomAnchor, constant: -20)
        ])
    }
    
    private func setupKeyboardHandling() {
        // Add tap gesture to dismiss keyboard
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard))
        view.addGestureRecognizer(tapGesture)
        
        // Register for keyboard notifications
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    // MARK: - Actions
    @objc private func nextButtonTapped() {
        // Validate inputs
        guard let name = nameTextField.text, !name.isEmpty,
              let email = emailTextField.text, !email.isEmpty,
              let password = passwordTextField.text, !password.isEmpty,
              let confirmPassword = confirmPasswordTextField.text, !confirmPassword.isEmpty else {
            showAlert(title: "Missing Information", message: "Please fill in all fields.")
            return
        }
        
        // Get relationship from segmented control
        let relationshipOptions = ["Parent", "Guardian", "Other"]
        let relationship = relationshipOptions[relationshipSegmentedControl.selectedSegmentIndex]
        
        // Validate email format
        if !isValidEmail(email) {
            showAlert(title: "Invalid Email", message: "Please enter a valid email address.")
            return
        }
        
        // Validate password match
        if password != confirmPassword {
            showAlert(title: "Passwords Don't Match", message: "The passwords you entered don't match.")
            return
        }
        
        // Store user information to pass to the next screen
        userInfo["name"] = name
        userInfo["email"] = email
        userInfo["relationship"] = relationship
        userInfo["password"] = password
        
        // Create a ModernBabySignupViewController and pass user information
        let babyDetailsVC = ModernBabySignupViewController()
        babyDetailsVC.userEmail = email
        babyDetailsVC.userName = name
        babyDetailsVC.userRelationship = relationship
        babyDetailsVC.userPassword = password
        
        // Present the baby details view controller modally with a custom transition
        babyDetailsVC.modalPresentationStyle = .fullScreen
        present(babyDetailsVC, animated: true)
    }
    
    @objc private func signInButtonTapped() {
        dismiss(animated: true)
    }
    
    @objc private func dismissKeyboard() {
        view.endEditing(true)
    }
    
    @objc private func keyboardWillShow(notification: NSNotification) {
        if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue {
            // Adjust content to ensure the active text field is visible
            if view.frame.origin.y == 0 {
                let activeTextField = findActiveTextField()
                if let activeField = activeTextField {
                    let textFieldFrame = activeField.convert(activeField.bounds, to: view)
                    let textFieldBottom = textFieldFrame.origin.y + textFieldFrame.size.height
                    let keyboardTop = view.frame.size.height - keyboardSize.height
                    
                    // If the bottom of the text field is below the top of the keyboard, adjust the view
                    if textFieldBottom > keyboardTop {
                        view.frame.origin.y = keyboardTop - textFieldBottom - 20 // Extra space for padding
                    }
                }
            }
        }
    }
    
    @objc private func keyboardWillHide(notification: NSNotification) {
        // Reset the view position
        if view.frame.origin.y != 0 {
            view.frame.origin.y = 0
        }
    }
    
    // MARK: - Helper Methods
    private func findActiveTextField() -> UITextField? {
        let textFields = [nameTextField, emailTextField, passwordTextField, confirmPasswordTextField]
        return textFields.first(where: { $0.isFirstResponder })
    }
    
    private func isValidEmail(_ email: String) -> Bool {
        let emailRegEx = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}"
        let emailPred = NSPredicate(format:"SELF MATCHES %@", emailRegEx)
        return emailPred.evaluate(with: email)
    }
    
    private func showAlert(title: String, message: String) {
        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alertController.addAction(UIAlertAction(title: "OK", style: .default))
        present(alertController, animated: true)
    }
}

// MARK: - UITextFieldDelegate
extension ModernSignupViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        switch textField {
        case nameTextField:
            emailTextField.becomeFirstResponder()
        case emailTextField:
            passwordTextField.becomeFirstResponder()
        case passwordTextField:
            confirmPasswordTextField.becomeFirstResponder()
        case confirmPasswordTextField:
            nextButtonTapped()
        default:
            textField.resignFirstResponder()
        }
        return true
    }
}
